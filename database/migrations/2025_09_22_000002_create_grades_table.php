<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

/**
 * Create the grades table.
 * Stores user grade/level information for approval and position mapping.
 */
return new class extends Migration
{
    public function up(): void
    {
        Schema::create('grades', function (Blueprint $table) {
            $table->id();
            $table->string('name')->comment('Grade name/title');
            $table->integer('level')->index()->comment('Numerical level for ordering and comparisons');
            $table->foreignId('min_approval_grade_id')->nullable()->index();
            $table->boolean('is_approver_grade')->default(false)->index()->comment('Whether this grade can approve certain workflows');

            // Audit
            $table->foreignId('created_by')->nullable()->index();
            $table->foreignId('updated_by')->nullable()->index();
            $table->foreignId('deleted_by')->nullable()->index();

            $table->timestampsTz();
            $table->softDeletesTz();

            $table->comment('User grades and levels used for approvals and position mapping.');
        });

        // Add explicit foreign keys to avoid autogenerated name collisions on some MySQL setups
        Schema::table('grades', function (Blueprint $table) {
            $table->foreign('min_approval_grade_id', 'grades_min_approval_grade_id_fk')
                ->references('id')->on('grades')->onDelete('set null');

            $table->foreign('created_by', 'grades_created_by_fk')
                ->references('id')->on('users')->onDelete('set null');

            $table->foreign('updated_by', 'grades_updated_by_fk')
                ->references('id')->on('users')->onDelete('set null');

            $table->foreign('deleted_by', 'grades_deleted_by_fk')
                ->references('id')->on('users')->onDelete('set null');
        });
    }

    public function down(): void
    {
        if (Schema::hasTable('grades')) {
            Schema::table('grades', function (Blueprint $table) {
                foreach (['min_approval_grade_id', 'created_by', 'updated_by', 'deleted_by'] as $col) {
                    try {
                        $table->dropForeign([$col]);
                    } catch (\Throwable $e) {
                        // ignore
                    }
                }
            });

            Schema::dropIfExists('grades');
        }
    }
};
